{"version":3,"sources":["reportWebVitals.js","ServiceItems.js","ServiceList.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ServiceItems","item","url","id","listItems","this","props","entries","map","createService","className","Component","ServiceList","state","items","addItem","bind","loadData","fetch","res","json","result","console","log","setState","isLoaded","error","e","_inputElement","value","newItem","status","prevState","concat","preventDefault","onSubmit","ref","a","placeholder","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,0CCkBCQ,E,mKAjBX,SAAcC,GACV,OAAO,6BAAsBA,EAAKC,KAAjBD,EAAKE,M,oBAG1B,WAEI,IACIC,EADiBC,KAAKC,MAAMC,QACDC,IAAIH,KAAKI,eAExC,OACI,oBAAIC,UAAU,cAAd,SACMN,Q,GAZSO,aCoFZC,E,kDAlFX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IAEDO,MAAQ,CACTC,MAAO,IAGX,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBAPA,E,qDAUnB,WACIX,KAAKY,a,2BAGT,WACI,MAAO,CACC,CAAC,GAAK,IAAI,IAAM,wBAAwB,OAAS,KAAK,CAAC,GAAK,IAAI,IAAM,wBAAwB,OAAS,Q,sBAInH,WAAY,IAAD,OACPC,MAAM,iCACDxB,MAAK,SAAAyB,GAAG,OAAIA,EAAIC,UAChB1B,MACG,SAAC2B,GACGC,QAAQC,IAAI,+CAAgDF,GAC5D,EAAKG,SAAS,CACVC,UAAU,EACVX,MAAOO,OAMf,SAACK,GACG,EAAKF,SAAS,CACVC,UAAU,EACVC,e,qBAMpB,SAAQC,GACJ,GAAiC,KAA7BtB,KAAKuB,cAAcC,MAAc,CAEjC,IAAIC,EAAU,CACV5B,IAAKG,KAAKuB,cAAcC,MACxB1B,GAAI,EACJ4B,OAAQ,GAGZ1B,KAAKmB,UAAS,SAACQ,GACX,MAAO,CACHlB,MAAOkB,EAAUlB,MAAMmB,OAAOH,OAItCzB,KAAKuB,cAAcC,MAAQ,GAG/BF,EAAEO,mB,oBAGN,WAAU,IAAD,OACL,OACI,sBAAKxB,UAAU,kBAAf,UACI,qBAAKA,UAAU,SAAf,SACI,uBAAMyB,SAAW9B,KAAKU,QAAtB,UACI,uBAAOqB,IAAM,SAACC,GAAD,OAAO,EAAKT,cAAgBS,GAClCC,YAAY,2BAEnB,wBAAQC,KAAK,MAAb,sBAGR,cAAC,EAAD,CAAchC,QAAUF,KAAKQ,MAAMC,e,GA5EzBH,aCF1B6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM1BrD,M","file":"static/js/main.318dfa11.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {Component} from \"react\";\n\n/**\n * Items in service list component.\n *\n * @author Janos Vajda\n */\nclass ServiceItems extends Component {\n    createService(item) {\n        return <li key={ item.id }>{ item.url }</li>\n    }\n\n    render() {\n\n        let serviceEntries = this.props.entries;\n        let listItems = serviceEntries.map(this.createService);\n\n        return (\n            <ul className=\"serviceList\">\n                { listItems }\n            </ul>\n        );\n    }\n};\n\nexport default ServiceItems;\n","import React, {Component} from \"react\";\nimport ServiceItems from \"./ServiceItems\";\n\n/**\n * Service List component.\n *\n * @author Janos Vajda\n */\nclass ServiceList extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            items: []\n        };\n\n        this.addItem = this.addItem.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadTestItems() {\n        return [\n                {\"id\":\"1\",\"url\":\"https://test.service1\",\"status\":\"0\"},{\"id\":\"2\",\"url\":\"https://test.service2\",\"status\":\"0\"}\n            ];\n    }\n\n    loadData() {\n        fetch(\"http://localhost:8888/service\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    console.log('Result of componentDidMount in ServiceList: ', result)\n                    this.setState({\n                        isLoaded: true,\n                        items: result\n                    });\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n\n    addItem(e) {\n        if (this._inputElement.value !== \"\") {\n\n            let newItem = {\n                url: this._inputElement.value,\n                id: 0,\n                status: 0,\n            };\n\n            this.setState((prevState) => {\n                return {\n                    items: prevState.items.concat(newItem)\n                };\n            });\n\n            this._inputElement.value = \"\";\n        }\n\n        e.preventDefault();\n    }\n\n    render() {\n        return (\n            <div className=\"serviceListMain\">\n                <div className=\"header\">\n                    <form onSubmit={ this.addItem }>\n                        <input ref={ (a) => this._inputElement = a }\n                               placeholder=\"Enter new service name\">\n                        </input>\n                        <button type=\"Add\">add</button>\n                    </form>\n                </div>\n                <ServiceItems entries={ this.state.items }/>\n            </div>\n        );\n    }\n}\n\n\nexport default ServiceList;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport ServiceList from \"./ServiceList\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <ServiceList/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}